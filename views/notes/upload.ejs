<style>
  .error-text {
    color: #dc2626; /* red */
    font-size: 0.9rem;
    margin-top: 4px;
    display: none;
  }
  progress {
  -webkit-appearance: none;
  appearance: none;
  width: 60%;
  height: 25px;
  border-radius: 12px;
  overflow: hidden;
  background-color: #f3f4f6; /* light gray background */
  box-shadow: 0 0 5px rgba(0,0,0,0.1) inset;
}

/* For Chrome/Safari */
progress::-webkit-progress-bar {
  background-color: #f3f4f6;
  border-radius: 12px;
}

progress::-webkit-progress-value {
  background: linear-gradient(90deg, #3b82f6, #2563eb); /* blue gradient */
  border-radius: 12px;
  transition: width 0.3s ease;
}

/* For Firefox */
progress::-moz-progress-bar {
  background: linear-gradient(90deg, #3b82f6, #2563eb);
  border-radius: 12px;
}

</style>

<link rel="stylesheet" href="/css/eachNoteCss.css">

<div class="upload-form-container">
  <h2>üì§ Upload New Note</h2>
  <form id="uploadForm" enctype="multipart/form-data">
    
    <div class="form-group">
      <label for="title">Title *</label>
      <input type="text" name="title" id="title" required>
    </div>

    <div class="form-group">
      <label for="description">Description</label>
      <textarea name="description" id="description" rows="3"></textarea>
    </div>

    <div class="form-group">
      <label for="subject">Subject *</label>
      <select name="subject" id="subject" required>
        <option value="">-- Select Subject --</option>
        <% subjects.forEach(sub => { %>
          <option value="<%= sub._id %>"><%= sub.name %></option>
        <% }) %>
        <option value="other">‚ûï Add New Subject</option>
      </select>
    </div>

    <!-- Hidden input for new subject -->
    <div class="form-group" id="newSubjectGroup" style="display:none;">
      <label for="newSubject">New Subject Name *</label>
      <input type="text" name="newSubject" id="newSubject" placeholder="Enter new subject">
    </div>

    <div class="form-group">
      <label for="course">Course *</label>
      <select name="course" id="course" required>
        <option value="">-- Select Course --</option>
        <% courses.forEach(course => { %>
          <option value="<%= course %>"><%= course %></option>
        <% }) %>
      </select>
    </div>


    <div class="form-group">
      <label for="semester">Semester *</label>
      <select name="semester" id="semester" required>
        <option value="">-- Select Semester --</option>
        <% semester.forEach(s => { %>
          <option value="<%= s %>"><%= s %></option>
        <% }) %>
      </select>
    </div>



    <div class="form-group">
      <label for="file">Upload File *</label>
      <input type="file" name="file" id="file" accept=".pdf" required>
      <p class="error-text" id="fileError">‚ùå File must be a PDF and less than 5MB.</p>
    </div>

    <button type="submit" class="form-submit-btn">Upload Note</button>
  </form>

  <!-- Progress bar -->



</div>

<div id="progressContainer" style="
  display:none;
  position: fixed; 
  top: 0; 
  left: 0; 
  width: 100%; 
  height: 100%; 
  background: rgba(255, 241, 241, 0.9); 
  z-index: 1000;
  justify-content: center;
  align-items: center;
  flex-direction: column;
">
  <progress id="progressBar" value="0" max="100" style="width: 60%; height: 25px;"></progress>
  <span id="progressText" style="margin-top:10px; font-size:1.2rem; font-weight:600;">0%</span>
</div>



<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  const fileInput = document.getElementById("file");
  const fileError = document.getElementById("fileError");
  const form = document.getElementById("uploadForm");
  const progressContainer = document.getElementById("progressContainer");
  const progressBar = document.getElementById("progressBar");
  const progressText = document.getElementById("progressText");

  // Aapke Cloudinary details - Inko aap EJS variables se bhi pass kar sakte hain for security
  const CLOUD_NAME = "<%= process.env.CLOUD_NAME %>"; // IMPORTANT: Backend se pass karein
  const API_KEY = "<%= process.env.CLOUD_API_KEY %>";   // IMPORTANT: Backend se pass karein
  const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/raw/upload`;

  // Subject toggle logic (waise hi rahega)
  document.getElementById("subject").addEventListener("change", function() {
    document.getElementById("newSubjectGroup").style.display =
      this.value === "other" ? "block" : "none";
  });

  // File validation logic (waise hi rahega)
  fileInput.addEventListener("change", function() {
    fileError.style.display = "none";
    const file = this.files[0];
    if (!file) return;

    if (file.type !== "application/pdf") {
      fileError.textContent = "‚ùå Only PDF files are allowed.";
      fileError.style.display = "block";
      this.value = "";
      return;
    }

    if (file.size > 10 * 1024 * 1024) {
      fileError.textContent = "‚ùå File must be less than 10MB.";
      fileError.style.display = "block";
      this.value = "";
      return;
    }
  });

  // ===== NAYA UPLOAD LOGIC =====
  form.addEventListener("submit", async function(e) {
    e.preventDefault();
    if (fileError.style.display === "block" || !fileInput.files[0]) {
        alert("Please select a valid PDF file.");
        return;
    }

    progressContainer.style.display = "flex";

    try {
      // 1. Backend se signature fetch karein
      const signatureResponse = await axios.get("/api/upload-signature", {
        withCredentials: true 
      });
      const { signature, timestamp } = signatureResponse.data;
      
      const file = fileInput.files[0];
      const formDataForCloudinary = new FormData();
      formDataForCloudinary.append("file", file);
  formDataForCloudinary.append("api_key", API_KEY);
  formDataForCloudinary.append("timestamp", timestamp);
  formDataForCloudinary.append("signature", signature);
  formDataForCloudinary.append("folder", "campusNotes");



      // 2. File ko ‡™∏‡´Ä‡™ß‡™æ Cloudinary par upload karein
      const cloudinaryResponse = await axios.post(UPLOAD_URL, formDataForCloudinary, {
        headers: { "Content-Type": "multipart/form-data" },
        onUploadProgress: function(progressEvent) {
          const percent = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          progressBar.value = percent;
          progressText.innerText = percent + "%";
        }
      });
      
      const uploadedFileUrl = cloudinaryResponse.data.secure_url;

      // 3. Cloudinary URL aur baaki form data ko apne server par bhejein
      const noteDetails = {
        title: form.title.value,
        description: form.description.value,
        subject: form.subject.value,
        newSubject: form.newSubject.value,
        course: form.course.value,
        semester: form.semester.value,
        fileUrl: uploadedFileUrl
      };

      const saveNoteResponse = await axios.post("/upload", noteDetails);
      
      // 4. Success hone par user ko redirect karein
      if(saveNoteResponse.data.success) {
        alert("Upload successful! Note has been sent for verification.");
        window.location.href = saveNoteResponse.data.redirectUrl;
      }

    } catch (err) {
      console.error("Upload failed:", err);
      alert("‚ùå Upload failed: " + (err.response?.data?.error || err.message));
      progressContainer.style.display = "none";
    }
  });
</script>
